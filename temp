from bokeh.plotting import figure, show, output_file
from bokeh.sampledata.us_counties import data as counties
from bokeh.sampledata.us_states import data as states
from bokeh.sampledata.unemployment import data as unemployment
import pandas as pd
from bokeh.plotting import figure, show, curdoc
from bokeh.io import output_file
from bokeh.models import ColumnDataSource, HoverTool, TapTool, WheelZoomTool, ResetTool, PanTool
from bokeh.transform import factor_cmap
from bokeh.palettes import Spectral6
from bokeh.layouts import row
from bokeh.events import Tap

del states["HI"]
del states["AK"]

EXCLUDED = ("ak", "hi", "pr", "gu", "vi", "mp", "as")

state_xs = [states[code]["lons"] for code in states]
state_ys = [states[code]["lats"] for code in states]

county_xs=[counties[code]["lons"] for code in counties if counties[code]["state"] not in EXCLUDED]
county_ys=[counties[code]["lats"] for code in counties if counties[code]["state"] not in EXCLUDED]

colors = ["#F1EEF6", "#D4B9DA", "#C994C7", "#DF65B0", "#DD1C77", "#980043"]

county_names = [county['name'] for county in counties.values()]

data=dict(
    x=county_xs,
    y=county_ys,
    name=county_names,
)

county_colors = []
for county_id in counties:
    if counties[county_id]["state"] in EXCLUDED:
        continue
    try:
        rate = unemployment[county_id]
        idx = int(rate/6)
        county_colors.append(colors[idx])
    except KeyError:
        county_colors.append("black")

p = figure(title="US Unemployment 2009", toolbar_location="left", tools="tap,hover,wheel_zoom,reset,pan",
           background_fill_color="#FBE7B6",
           plot_width=1100, plot_height=700,
           x_axis_location=None, y_axis_location=None,)
#intention = hover over a county, displays the county name and total cases so far
hover = p.select_one(HoverTool)
p.grid.grid_line_color = None
p.hover.point_policy = "follow_mouse"
hover.tooltips = [
    ("State", "@statefip"),
    ("County", "@countyfip"),
    ("Total cases", "@totalcases")
]

#intention = click on a county, generate a linechart of cases over time, saves it to a folder, then display that image
taptool = p.select(type=TapTool)
def callback(event):
    selected = source.selected.indices
    print(selected)
p.on_event(Tap, callback)


p.patches(county_xs, county_ys,
          fill_color=county_colors, fill_alpha=0.7,
          line_color="black", line_width=.3)

p.patches(state_xs, state_ys, fill_alpha=0.0,
          line_color="#884444", line_width=1, line_alpha=0.3)

output_file("choropleth.html", title="choropleth.py example")

show(p)
